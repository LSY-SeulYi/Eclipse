package dao;

import java.sql.SQLException;
import java.util.List;

public interface IDao<T,K> {
	public int insert(T vo) throws SQLException;
	public int delete(K key) throws SQLException;
	public int update(T vo) throws SQLException;
	public T select(K key) throws SQLException;
	public List<T> selectAll() throws SQLException;
	public List<T> selectByConditions(String conditions) throws SQLException;
}


package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import common.ConnectionFactory;
import vo.Departments;

public class DepartmentsDAO implements IDao<Departments, Integer> {

	@Override
	public int insert(Departments vo) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "INSERT INTO DEPARTMENTS " + "(DEPARTMENT_ID,DEPARTMENT_NAME,MANAGER_ID,LOCATION_ID) "
				+ "VALUES(?,?,?,?) ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		
		pstmt.setInt(1, vo.getDepartment_id());
		pstmt.setString(2, vo.getDepartment_name());
		pstmt.setInt(3, vo.getManager_id());
		pstmt.setInt(4, vo.getLocation_id());
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public int delete(Integer key) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "DELETE FROM DEPARTMENTS WHERE DEPARTMENT_ID = ? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, key);
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public int update(Departments vo) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "UPDATE DEPARTMENTS SET DEPARTMENT_NAME=?,MANAGER_ID=?,LOCATION_ID=? "
				+ "WHERE DEPARTMENT_ID=? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, vo.getDepartment_name());
		pstmt.setInt(2, vo.getManager_id());
		pstmt.setInt(3, vo.getLocation_id());
		pstmt.setInt(4, vo.getDepartment_id());
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public Departments select(Integer key) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID= "+key;
		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sql);
		Departments vo = new Departments();
		while (rs.next()) {
			
			vo.setDepartment_id(rs.getInt("DEPARTMENT_ID"));
			vo.setDepartment_name(rs.getNString("DEPARTMENT_NAME"));
			vo.setManager_id(rs.getInt("MANAGER_ID"));
			vo.setLocation_id(rs.getInt("LOCATION_ID"));
		}
		conn.close();
		return vo;
	}

	@Override
	public List<Departments> selectAll() throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM DEPARTMENTS ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery(sql);
		List<Departments> data = new ArrayList<>();
		while (rs.next()) {
			Departments vo = new Departments();
			// 컬럼이름으로 가져오는 것이 더 안전함
			vo.setDepartment_id(rs.getInt("DEPARTMENT_ID"));
			vo.setDepartment_name(rs.getNString("DEPARTMENT_NAME"));
			vo.setManager_id(rs.getInt("MANAGER_ID"));
			vo.setLocation_id(rs.getInt("LOCATION_ID"));
			data.add(vo);
		}
		conn.close();
		return data;
	}

	@Override
	public List<Departments> selectByConditions(String conditions) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM DEPARTMENTS " + conditions;
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery();
		List<Departments> data = new ArrayList<>();
		while (rs.next()) {
			Departments vo = new Departments();
			// 컬럼이름으로 가져오는 것이 더 안전함
			vo.setDepartment_id(rs.getInt("DEPARTMENT_ID"));
			vo.setDepartment_name(rs.getNString("DEPARTMENT_NAME"));
			vo.setManager_id(rs.getInt("MANAGER_ID"));
			vo.setLocation_id(rs.getInt("LOCATION_ID"));
			data.add(vo);
		}
		conn.close();
		return data;
	}

	public Integer getMax() throws SQLException {
		int max = 0;
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT MAX(DEPARTMENT_ID) FROM DEPARTMENTS ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery();
		rs.next();
		max = rs.getInt(1);
		return max;
	}
}


package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


import common.ConnectionFactory;
import vo.Employees;


public class EmployeesDAO implements IDao<Employees, Integer> {

	@Override
	public int insert(Employees vo) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "INSERT INTO EMPLOYEES " + "(EMPLOYEE_ID,FIRST_NAME,LAST_NAME,EMAIL,PHONE_NUMBER,HIRE_DATE,JOB_ID,SALARY,COMMISSION_PCT,MANAGER_ID,DEPARTMENT_ID) "
				+ "VALUES(EMPLOYEES_SEQ.NEXTVAL,?,?,?,?,?,?,?,?,?,?) ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		
		pstmt.setString(1, vo.getFirst_name());
		pstmt.setString(2, vo.getLast_name());
		pstmt.setString(3, vo.getEmail());
		pstmt.setString(4, vo.getPhone_number());
		pstmt.setDate(5, vo.getHire_date());
		pstmt.setString(6, vo.getJob_id());
		pstmt.setInt(7, vo.getSalary());
		pstmt.setDouble(8, vo.getCommission_pct());
		pstmt.setInt(9, vo.getManager_id());
		pstmt.setInt(10, vo.getDepartment_id());
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public int delete(Integer key) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "DELETE EMPLOYEES WHERE EMPLOYEE_ID = ? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, key);
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public int update(Employees vo) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "UPDATE EMPLOYEES SET FIRST_NAME=?,LAST_NAME=?,EMAIL=?,PHONE_NUMBER=?,HIRE_DATE=?,JOB_ID=?,SALARY=?, " 
		+ "COMMISSION_PCT=?,MANAGER_ID=?,DEPARTMENT_ID=? "
				+ "WHERE EMPLOYEE_ID=? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		
		pstmt.setString(1, vo.getFirst_name());
		pstmt.setString(2, vo.getLast_name());
		pstmt.setString(3, vo.getEmail());
		pstmt.setString(4, vo.getPhone_number());
		pstmt.setDate(5, vo.getHire_date());
		pstmt.setString(6, vo.getJob_id());
		pstmt.setInt(7, vo.getSalary());
		pstmt.setDouble(8, vo.getCommission_pct());
		pstmt.setInt(9, vo.getManager_id());
		pstmt.setInt(10, vo.getDepartment_id());
		pstmt.setInt(11, vo.getEmployee_id());
		
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public Employees select(Integer key) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM EMPLOYEES WHERE EMPLOYEE_ID= '"+key+"'";
		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sql);
		Employees vo = new Employees();
		while (rs.next()) {
			vo.setEmployee_id(rs.getInt("EMPLOYEE_ID"));
			vo.setFirst_name(rs.getNString("FIRST_NAME"));
			vo.setLast_name(rs.getNString("LAST_NAME"));
			vo.setEmail(rs.getNString("EMAIL"));
			vo.setPhone_number(rs.getNString("PHONE_NUMBER"));
			vo.setHire_date(rs.getDate("HIRE_DATE"));
			vo.setJob_id(rs.getNString("JOB_ID"));
			vo.setSalary(rs.getInt("SALARY"));
			vo.setCommission_pct(rs.getDouble("COMMISSION_PCT"));
			vo.setManager_id(rs.getInt("MANAGER_ID"));
			vo.setDepartment_id(rs.getInt("DEPARTMENT_ID"));
		}
		conn.close();
		return vo;
	}

	@Override
	public List<Employees> selectAll() throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM EMPLOYEES ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery(sql);
		List<Employees> data = new ArrayList<>();
		while (rs.next()) {
			Employees vo = new Employees();
			vo.setEmployee_id(rs.getInt("EMPLOYEE_ID"));
			vo.setFirst_name(rs.getNString("FIRST_NAME"));
			vo.setLast_name(rs.getNString("LAST_NAME"));
			vo.setEmail(rs.getNString("EMAIL"));
			vo.setPhone_number(rs.getNString("PHONE_NUMBER"));
			vo.setHire_date(rs.getDate("HIRE_DATE"));
			vo.setJob_id(rs.getNString("JOB_ID"));
			vo.setSalary(rs.getInt("SALARY"));
			vo.setCommission_pct(rs.getDouble("COMMISSION_PCT"));
			vo.setManager_id(rs.getInt("MANAGER_ID"));
			vo.setDepartment_id(rs.getInt("DEPARTMENT_ID"));
			data.add(vo);
		}
		conn.close();
		return data;
	}

	@Override
	public List<Employees> selectByConditions(String conditions) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM EMPLOYEES " + conditions;
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery(sql);
		List<Employees> data = new ArrayList<>();
		while (rs.next()) {
			Employees vo = new Employees();
			vo.setEmployee_id(rs.getInt("EMPLOYEE_ID"));
			vo.setFirst_name(rs.getNString("FIRST_NAME"));
			vo.setLast_name(rs.getNString("LAST_NAME"));
			vo.setEmail(rs.getNString("EMAIL"));
			vo.setPhone_number(rs.getNString("PHONE_NUMBER"));
			vo.setHire_date(rs.getDate("HIRE_DATE"));
			vo.setJob_id(rs.getNString("JOB_ID"));
			vo.setSalary(rs.getInt("SALARY"));
			vo.setCommission_pct(rs.getDouble("COMMISSION_PCT"));
			vo.setManager_id(rs.getInt("MANAGER_ID"));
			vo.setDepartment_id(rs.getInt("DEPARTMENT_ID"));
			data.add(vo);
		}
		conn.close();
		return data;
	}

	public Integer getMax() throws SQLException {
		int max = 0;
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT MAX(EMPLOYEE_ID) FROM EMPLOYEES ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery();
		rs.next();
		max = rs.getInt(1);
		return max;
	}
}


package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import common.ConnectionFactory;
import vo.Job_History;

public class Job_HistoryDAO implements IDao<Job_History, String> {

	@Override
	public int insert(Job_History vo) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "INSERT INTO JOB_HISTORY "
				+ "(EMPLOYEE_ID,START_DATE,END_DATE,JOB_ID,DEPARTMENT_ID) "
				+ "VALUES(?,?,?,?,?)";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		
		pstmt.setInt(1, vo.getEmployee_id());
		pstmt.setDate(2, vo.getStart_date());
		pstmt.setDate(3, vo.getEnd_date());
		pstmt.setString(4, vo.getJob_id());
		pstmt.setInt(5, vo.getDepartment_id());
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}
	public Map<String,Object> getKeyMap(String key){
		Map<String,Object> keyMap = new HashMap<>();
		String[] compositeKey = key.split(",");
		int id = Integer.parseInt(compositeKey[0]);
		String[] ymd = compositeKey[1].split("-");
		int year = Integer.parseInt(ymd[0])-1900;
		int month = Integer.parseInt(ymd[1])-1;
		int day = Integer.parseInt(ymd[2]);
		Date startDay = new Date(year,month,day);
		keyMap.put("EMPLOYEE_ID",id);
		keyMap.put("START_DATE", startDay);
		return keyMap;
	}
	@Override
	public int delete(String key) throws SQLException {
		Map<String,Object> keyMap = getKeyMap(key);
		Connection conn = ConnectionFactory.create();
		String sql = "DELETE JOB_HISTORY WHERE EMPLOYEE_ID = ? AND START_DATE = ? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, (int) keyMap.get("EMPLOYEE_ID"));
		pstmt.setDate(2, (Date) keyMap.get("START_DATE"));
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public int update(Job_History vo) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "UPDATE JOB_HISTORY SET END_DATE=?,JOB_ID=?,DEPARTMENT_ID=? "
				+ "WHERE EMPLOYEE_ID=? AND START_DATE=? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setDate(1, vo.getEnd_date());
		pstmt.setString(2, vo.getJob_id());
		pstmt.setInt(3, vo.getDepartment_id());
		pstmt.setInt(4, vo.getEmployee_id());
		pstmt.setDate(5, vo.getStart_date());
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public Job_History select(String key) throws SQLException {
		Map<String,Object> keyMap = getKeyMap(key);
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM JOB_HISTORY WHERE EMPLOYEE_ID=? AND START_DATE=? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, (int) keyMap.get("EMPLOYEE_ID"));
		pstmt.setDate(2, (Date) keyMap.get("START_DATE"));
		ResultSet rs = pstmt.executeQuery();
		Job_History vo = new Job_History();
		while (rs.next()) {
			vo.setEmployee_id(rs.getInt("EMPLOYEE_ID"));
			vo.setStart_date(rs.getDate("START_DATE"));
			vo.setEnd_date(rs.getDate("END_DATE"));
			vo.setJob_id(rs.getNString("JOB_ID"));
			vo.setDepartment_id(rs.getInt("DEPARTMENT_ID"));
		}
		conn.close();
		return vo;
	}

	@Override
	public List<Job_History> selectAll() throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM JOB_HISTORY ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery();
		List<Job_History> data = new ArrayList<>();
		while (rs.next()) {
			Job_History vo = new Job_History();
			vo.setEmployee_id(rs.getInt("EMPLOYEE_ID"));
			vo.setStart_date(rs.getDate("START_DATE"));
			vo.setEnd_date(rs.getDate("END_DATE"));
			vo.setJob_id(rs.getNString("JOB_ID"));
			vo.setDepartment_id(rs.getInt("DEPARTMENT_ID"));
			data.add(vo);
		}
		conn.close();
		return data;
	}

	@Override
	public List<Job_History> selectByConditions(String conditions) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM JOB_HISTORY " + conditions;
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery();
		List<Job_History> data = new ArrayList<>();
		while (rs.next()) {
			Job_History vo = new Job_History();
			vo.setEmployee_id(rs.getInt("EMPLOYEE_ID"));
			vo.setStart_date(rs.getDate("START_DATE"));
			vo.setEnd_date(rs.getDate("END_DATE"));
			vo.setJob_id(rs.getNString("JOB_ID"));
			vo.setDepartment_id(rs.getInt("DEPARTMENT_ID"));
			data.add(vo);
		}
		conn.close();
		return data;
	}

	public long getMax() throws SQLException {
		long max = 0;
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT MAX(EMPLOYEE_ID) FROM JOB_HISTORY ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery();
		rs.next();
		max = rs.getLong(1);
		return max;
	}
	
	public int deleteOrphanRecord(int empId) throws SQLException{
		Connection conn = ConnectionFactory.create();
		String sql = " DELETE JOB_HISTORY WHERE EMPLOYEE_ID=? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setInt(1, empId);
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
		
	}
}


package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import common.ConnectionFactory;
import vo.Jobs;


public class JobsDAO implements IDao<Jobs, String> {

	@Override
	public int insert(Jobs vo) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "INSERT INTO JOBS " + "(JOB_ID,JOB_TITLE,MIN_SALARY,MAX_SALARY) "
				+ "VALUES(?,?,?,?) ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		
		pstmt.setString(1, vo.getJob_id());
		pstmt.setString(2, vo.getJob_title());
		pstmt.setInt(3, vo.getMin_salary());
		pstmt.setInt(4, vo.getMax_salary());
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public int delete(String key) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "DELETE FROM JOBS WHERE JOB_ID = ? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, key);
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public int update(Jobs vo) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "UPDATE JOBS SET JOB_TITLE=?,MIN_SALARY=?,MAX_SALARY=? "
				+ "WHERE JOB_ID=? ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		pstmt.setString(1, vo.getJob_title());
		pstmt.setInt(2, vo.getMin_salary());
		pstmt.setInt(3, vo.getMax_salary());
		pstmt.setString(4, vo.getJob_id());
		int res = pstmt.executeUpdate();
		conn.close();
		return res;
	}

	@Override
	public Jobs select(String key) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM JOBS WHERE JOB_ID= '"+key+"'";
		Statement stmt = conn.createStatement();
		ResultSet rs = stmt.executeQuery(sql);
		Jobs vo = new Jobs();
		while (rs.next()) {
			
			vo.setJob_id(rs.getString("JOB_ID"));
			vo.setJob_title(rs.getString("JOB_TITLE"));
			vo.setMin_salary(rs.getInt("MIN_SALARY"));
			vo.setMax_salary(rs.getInt("MAX_SALARY"));
		}
		conn.close();
		return vo;
	}

	@Override
	public List<Jobs> selectAll() throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM JOBS ";
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery(sql);
		List<Jobs> list = new ArrayList<>();
		while (rs.next()) {
			Jobs vo = new Jobs();
			vo.setJob_id(rs.getString("JOB_ID"));
			vo.setJob_title(rs.getString("JOB_TITLE"));
			vo.setMin_salary(rs.getInt("MIN_SALARY"));
			vo.setMax_salary(rs.getInt("MAX_SALARY"));
			list.add(vo);
		}
		conn.close();
		return list;
	}

	@Override
	public List<Jobs> selectByConditions(String conditions) throws SQLException {
		Connection conn = ConnectionFactory.create();
		String sql = "SELECT * FROM JOBS " + conditions;
		PreparedStatement pstmt = conn.prepareStatement(sql);
		ResultSet rs = pstmt.executeQuery();
		List<Jobs> data = new ArrayList<>();
		while (rs.next()) {
			Jobs vo = new Jobs();
			// 컬럼이름으로 가져오는 것이 더 안전함
			vo.setJob_id(rs.getNString("JOB_ID"));
			vo.setJob_title(rs.getNString("JOB_TITLE"));
			vo.setMin_salary(rs.getInt("MIN_SALARY"));
			vo.setMax_salary(rs.getInt("MAX_SALARY"));
			data.add(vo);
		}
		conn.close();
		return data;
	}
}
